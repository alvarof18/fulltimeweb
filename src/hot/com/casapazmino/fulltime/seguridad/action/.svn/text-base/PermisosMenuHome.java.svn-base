package com.casapazmino.fulltime.seguridad.action;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Transactional;
import org.jboss.seam.core.Expressions;
import org.jboss.seam.framework.EntityHome;
import org.jboss.seam.persistence.PersistenceProvider;

import com.casapazmino.fulltime.seguridad.model.PermisosMenu;
import com.casapazmino.fulltime.seguridad.model.Roles;

@Name("permisosMenuHome")
public class PermisosMenuHome extends EntityHome<PermisosMenu> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/*@In(create = true)
	ItemsMenuRolesHome itemsMenuRolesHome;*/
	@In(create = true)
	RolesHome rolesHome;

	@Override
	protected void initDefaultMessages() {
		Expressions expressions = new Expressions();
		if (getCreatedMessage() == null) { setCreatedMessage(expressions.createValueExpression("#{messages['mensaje.grabar']}")); }
		if (getUpdatedMessage() == null) { setUpdatedMessage(expressions.createValueExpression("#{messages['mensaje.actualizar']}")); }
		if (getDeletedMessage() == null) { setDeletedMessage(expressions.createValueExpression("#{messages['mensaje.eliminar']}")); }
	}

	public void setPermisosMenuId(Integer id) {
		setId(id);
	}

	public Integer getPermisosMenuId() {
		return (Integer) getId();
	}

	@Override
	protected PermisosMenu createInstance() {
		PermisosMenu permisosMenu = new PermisosMenu();
		return permisosMenu;
	}

	public void wire() {
		getInstance();
		/*ItemsMenuRoles itemsMenuRoles = itemsMenuRolesHome.getDefinedInstance();
		if (itemsMenuRoles != null) {
			getInstance().setItemsMenuRoles(itemsMenuRoles);
		}*/
		Roles roles = rolesHome.getDefinedInstance();
		if (roles != null) {
			getInstance().setRoles(roles);
		}
	}

	public boolean isWired() {
		return true;
	}

	public PermisosMenu getDefinedInstance() {
		return isIdDefined() ? getInstance() : null;
	}
	
	@Transactional
	public String persist()
	{
		getEntityManager().persist(getInstance());
		getEntityManager().flush();
		assignId(PersistenceProvider.instance().getId(getInstance(),getEntityManager()));
		raiseAfterTransactionSuccessEvent();
		return "persisted";
	}
	
	@Transactional
	public String update()
	{
		joinTransaction();
		getEntityManager().flush();
		raiseAfterTransactionSuccessEvent();
		return "updated";
	}

}
