package com.casapazmino.fulltime.action;

import java.util.ArrayList;
import java.util.List;

import org.jboss.seam.Component;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.core.Expressions;
import org.jboss.seam.faces.FacesMessages;
import org.jboss.seam.framework.EntityHome;
import org.jboss.seam.log.Log;

import com.casapazmino.fulltime.model.Cargo;
import com.casapazmino.fulltime.model.Contacto;
import com.casapazmino.fulltime.model.DetalleTipoParametro;
import com.casapazmino.fulltime.model.Empleado;
import com.casapazmino.fulltime.model.EmpleadoPeriodoVacacion;
import com.casapazmino.fulltime.model.EmpleadoTitulo;
import com.casapazmino.fulltime.model.Permiso;
import com.casapazmino.fulltime.model.ProgramaVacacion;
import com.casapazmino.fulltime.model.SolicitudVacacion;
import com.casapazmino.fulltime.model.TipoParametro;
import com.casapazmino.fulltime.seguridad.model.Usuarios;

@Name("detalleTipoParametroHome")
public class DetalleTipoParametroHome extends EntityHome<DetalleTipoParametro> {

	private static final long serialVersionUID = 1L;
	@Logger
	Log log;
	
	@In(create = true)
	TipoParametroHome tipoParametroHome;
	@In(create = true)
	TipoParametroList tipoParametroList;
	
	DetalleTipoParametroList parametrosList =(DetalleTipoParametroList)Component.getInstance("detalleTipoParametroList",true);

	@Override
	protected void initDefaultMessages() {
		Expressions expressions = new Expressions();
		if (getCreatedMessage() == null) { setCreatedMessage(expressions.createValueExpression("#{messages['mensaje.grabar']}")); }
		if (getUpdatedMessage() == null) { setUpdatedMessage(expressions.createValueExpression("#{messages['mensaje.actualizar']}")); }
		if (getDeletedMessage() == null) { setDeletedMessage(expressions.createValueExpression("#{messages['mensaje.eliminar']}")); }
	}

	public void setDetalleTipoParametroDtpaId(Long id) {
		setId(id);
	}

	public Long getDetalleTipoParametroDtpaId() {
		return (Long) getId();
	}

	@Override
	protected DetalleTipoParametro createInstance() {
		DetalleTipoParametro detalleTipoParametro = new DetalleTipoParametro();
		return detalleTipoParametro;
	}

	public void wire() {
		getInstance();
		TipoParametro tipoParametro = tipoParametroHome.getDefinedInstance();
		if (tipoParametro != null) {
			getInstance().setTipoParametro(tipoParametro);
		}
	}

	public boolean isWired() {
		return true;
	}
	
	public List<DetalleTipoParametro> getListaParametros(Long parametro)
	{
		log.info("ENTRO EN GET LISTA PARAMETROS PARAMETRO:"+parametro);
		try
		{
			this.tipoParametroList.getTipoParametro().setTipaId(parametro);
			TipoParametro tipoParametro=new TipoParametro();
			tipoParametro=tipoParametroList.getSingleResult();
			this.parametrosList.getDetalleTipoParametro().setTipoParametro(tipoParametro);
			return parametrosList.getResultList();
		}
		catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return new ArrayList<DetalleTipoParametro>();
	}
	
	@Override
	public String remove(){
		try {
			super.remove();
		} catch (Exception e) {
			FacesMessages.instance().add("Error al borrar registro");
		}
		return "removed";
	}
	
	/**
	 * GET Y SET
	 * @return
	 */

	public DetalleTipoParametro getDefinedInstance() {
		return isIdDefined() ? getInstance() : null;
	}

	public List<Cargo> getCargos() {
		return getInstance() == null ? null : new ArrayList<Cargo>(
				getInstance().getCargos());
	}
	public List<Contacto> getContactos() {
		return getInstance() == null ? null : new ArrayList<Contacto>(
				getInstance().getContactos());
	}
	public List<EmpleadoPeriodoVacacion> getEmpleadoPeriodoVacacions() {
		return getInstance() == null
				? null
				: new ArrayList<EmpleadoPeriodoVacacion>(getInstance()
						.getEmpleadoPeriodoVacacions());
	}
	public List<EmpleadoTitulo> getEmpleadoTitulos() {
		return getInstance() == null ? null : new ArrayList<EmpleadoTitulo>(
				getInstance().getEmpleadoTitulos());
	}
	public List<Empleado> getEmpleadosForEstado() {
		return getInstance() == null ? null : new ArrayList<Empleado>(
				getInstance().getEmpleadosForEstado());
	}
	public List<Empleado> getEmpleadosForEstadoCivil() {
		return getInstance() == null ? null : new ArrayList<Empleado>(
				getInstance().getEmpleadosForEstadoCivil());
	}
	public List<Empleado> getEmpleadosForSexo() {
		return getInstance() == null ? null : new ArrayList<Empleado>(
				getInstance().getEmpleadosForSexo());
	}
	public List<Permiso> getPermisosForAutorizado() {
		return getInstance() == null ? null : new ArrayList<Permiso>(
				getInstance().getPermisosForAutorizado());
	}
	public List<Permiso> getPermisosForDtpaId() {
		return getInstance() == null ? null : new ArrayList<Permiso>(
				getInstance().getPermisosForDtpaId());
	}
	public List<ProgramaVacacion> getProgramaVacacions() {
		return getInstance() == null ? null : new ArrayList<ProgramaVacacion>(
				getInstance().getProgramaVacacions());
	}
	public List<SolicitudVacacion> getSolicitudVacacionsForAutorizado() {
		return getInstance() == null ? null : new ArrayList<SolicitudVacacion>(
				getInstance().getSolicitudVacacionsForAutorizado());
	}
	public List<SolicitudVacacion> getSolicitudVacacionsForPeriodo() {
		return getInstance() == null ? null : new ArrayList<SolicitudVacacion>(
				getInstance().getSolicitudVacacionsForPeriodo());
	}
	public List<Usuarios> getUsuarioses() {
		return getInstance() == null ? null : new ArrayList<Usuarios>(
				getInstance().getUsuarioses());
	}

}
